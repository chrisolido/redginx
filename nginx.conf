worker_processes  2;

events {
    worker_connections  1024;
}

http {
    default_type application/octet-stream;
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 60;
    keepalive_requests 2000;
    client_body_timeout 12;
    client_header_timeout 12;
    send_timeout 10;
    types_hash_max_size 2048;
    server_tokens off;
    proxy_hide_header X-Powered-By;
    proxy_read_timeout 300;
    client_max_body_size 0;
    gzip on;
    gzip_disable "msie6";
    gzip_comp_level        2;
    gzip_min_length        1000;
    gzip_proxied expired no-cache no-store private auth;
    gzip_http_version 1.1;
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml text/javascript application/javascript image/png image/svg+xml image/gif application/octet-stream;

    real_ip_header X-Forwarded-For;
 
    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    server {
        listen       80;
        server_name  localhost;
        proxy_intercept_errors on;
        # error_page 400 500 502 503 504 /50x.html;
        location / {
            resolver kube-dns.kube-system.svc.cluster.local;
            set $target '';
            access_by_lua '
                local key = ngx.var.host

                if not key then
                    ngx.log(ngx.ERR, "no key found- " .. ngx.var.host)
                    return ngx.exit(400)
                end

                local redis = require "resty.redis"
                local red = redis:new()
                red:set_timeout(1000)

                -- local ok, err = red:connect("127.0.0.1", 6379);
                local ok, err = red:connect("unix:/var/run/redis/redis.sock");
                if not ok then
                    ngx.log(ngx.ERR, "failed to connect to redis: ", err)
                    return ngx.exit(500)
                end

                local host, err = red:get(key)
                if not host then
                    ngx.log(ngx.ERR, "failed to get redis key: ", err)
                    return ngx.exit(500)
                end

                if host == ngx.null then
                    ngx.log(ngx.ERR, "no host found for key ", key)
                    return ngx.exit(400)
                end
		ngx.var.target = host
            ';

            proxy_pass http://$target;
            proxy_http_version          1.1;
            proxy_set_header            Connection "";
            proxy_set_header            Host $host;
            proxy_set_header            X-Real-IP $remote_addr;
            proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;

        }
        #location  /50x.html {
        #   proxy_pass                  http://error-domain/error.html?domainName=$host;
        #   proxy_http_version          1.1;
        #   proxy_set_header            Connection "";
        #   proxy_set_header            Host $host;
        #   proxy_set_header            X-Real-IP $remote_addr;
        #   proxy_set_header            X-Forwarded-For $proxy_add_x_forwarded_for;
        #}
    }
}
